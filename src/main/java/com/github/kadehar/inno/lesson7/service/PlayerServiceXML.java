package com.github.kadehar.inno.lesson7.service;

import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.dataformat.xml.XmlMapper;
import com.github.kadehar.inno.lesson7.player.Player;

import java.io.IOException;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.atomic.AtomicInteger;

public class PlayerServiceXML implements PlayerService {
    private static final AtomicInteger AUTOGENERATED_ID = new AtomicInteger(1);
    private static final Path XML_FILE_PATH = Path.of("src/main/resources/players.xml");
    private static final XmlMapper MAPPER = XmlMapper.builder()
            .enable(SerializationFeature.INDENT_OUTPUT)
            .build();

    private final List<Player> modifiablePlayers = new ArrayList<>();
    private Collection<Player> players = Collections.emptyList();

    @Override
    public Collection<Player> getPlayers() {
        players = Collections.unmodifiableList(readFromFile());
        return players;
    }

    @Override
    public Player getPlayerById(int id) {
        players = getPlayers();
        return players.stream().filter(player -> player.getId() == id)
                .findFirst()
                .orElse(null);
    }

    @Override
    public Player deletePlayer(int id) {
        Player deletedPlayer = getPlayerById(id);
        players = players.stream().filter(player -> player.getId() != id).toList();
        saveToFile();
        return deletedPlayer;
    }

    @Override
    public int createPlayer(String nickname) {
        Player player = findByNick(nickname);
        if (player != null) {
            return player.getId();
        }
        int playerId = AUTOGENERATED_ID.getAndIncrement();
        modifiablePlayers.add(new Player(playerId, nickname));
        players = Collections.unmodifiableList(modifiablePlayers);
        saveToFile();
        return playerId;
    }

    @Override
    public int addPoints(int playerId, int points) {
        Player player = getPlayerById(playerId);
        player.setPoints(points);
        players = players.stream().map(item -> item.getId() == playerId ? player : item).toList();
        saveToFile();
        return player.getPoints();
    }

    private Player findByNick(String nick) {
        return players.stream().filter(player -> player.getNick().equals(nick))
                .findFirst()
                .orElse(null);
    }

    private List<Player> readFromFile() {
        try {
            JavaType type = MAPPER.getTypeFactory().constructCollectionType(List.class, Player.class);
            return MAPPER.readValue(XML_FILE_PATH.toFile(), type);
        } catch (IOException e) {
            return Collections.emptyList();
        }
    }

    private void saveToFile() {
        try {
            MAPPER.writeValue(XML_FILE_PATH.toFile(), players);
        } catch (IOException e) {
            System.out.println("Cannot write data to XML file");
        }
    }
}

package com.github.kadehar.inno.lesson7.service;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.github.kadehar.inno.lesson7.player.Player;

import java.io.IOException;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.atomic.AtomicInteger;

public class PlayerServiceJSON implements PlayerService {

    private static final AtomicInteger AUTOGENERATED_ID = new AtomicInteger(1);
    private static final Path JSON_FILE_PATH = Path.of("src/main/resources/players.json");
    private static final ObjectMapper MAPPER = new ObjectMapper();

    private final List<Player> modifiablePlayers = new ArrayList<>();
    private Collection<Player> players = Collections.emptyList();

    @Override
    public Collection<Player> getPlayers() {
        players = Collections.unmodifiableList(readFromFile());
        return players;
    }

    @Override
    public Player getPlayerById(int id) {
        players = getPlayers();
        return players.stream().filter(player -> player.getId() == id)
                .findFirst()
                .orElse(null);
    }

    @Override
    public Player deletePlayer(int id) {
        Player deletedPlayer = getPlayerById(id);
        players = players.stream().filter(player -> player.getId() != id).toList();
        saveToFile();
        return deletedPlayer;
    }

    @Override
    public int createPlayer(String nickname) {
        int playerId;
        Player player = findByNick(nickname);
        if (player != null) {
            return player.getId();
        } else {
            playerId = AUTOGENERATED_ID.getAndIncrement();
            player = new Player(playerId, nickname);
            modifiablePlayers.add(player);
        }
        players = Collections.unmodifiableList(modifiablePlayers);
        saveToFile();
        return playerId;
    }

    @Override
    public int addPoints(int playerId, int points) {
        Player playerById = getPlayerById(playerId);
        playerById.setPoints(points);
        players = players.stream().map(player -> player.getId() == playerId ? playerById : player).toList();
        saveToFile();
        return playerById.getPoints();
    }

    private Player findByNick(String nick) {
        return players.stream().filter(player -> player.getNick().equals(nick))
                .findFirst()
                .orElse(null);
    }

    private List<Player> readFromFile() {
        try {
            return MAPPER.readerForListOf(Player.class).readValue(JSON_FILE_PATH.toFile());
        } catch (IOException e) {
            return Collections.emptyList();
        }
    }

    private void saveToFile() {
        try {
            MAPPER.writerWithDefaultPrettyPrinter().writeValue(JSON_FILE_PATH.toFile(), players);
        } catch (IOException e) {
            System.out.println("Cannot write to file");
        }
    }
}
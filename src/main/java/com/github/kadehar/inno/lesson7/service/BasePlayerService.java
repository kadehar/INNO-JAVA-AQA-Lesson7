package com.github.kadehar.inno.lesson7.service;

import com.github.kadehar.inno.lesson7.player.Player;
import com.github.kadehar.inno.lesson7.player.Players;

import java.util.Collection;
import java.util.List;
import java.util.concurrent.atomic.AtomicInteger;

public abstract class BasePlayerService implements PlayerService {

    private static final AtomicInteger AUTOGENERATED_ID = new AtomicInteger(1);
    protected final Players players = new Players();

    @Override
    public Player getPlayerById(int id) {
        return players.getPlayers().stream().filter(player -> player.getId() == id)
                .findFirst()
                .orElse(null);
    }

    @Override
    public Collection<Player> getPlayers() {
        players.setPlayers(readFromFile());
        return players.getPlayers();
    }

    @Override
    public int createPlayer(String nickname) {
        int playerId;
        Player player = findByNick(nickname);
        if (player != null) {
            return player.getId();
        } else {
            playerId = AUTOGENERATED_ID.getAndIncrement();
            player = new Player(playerId, nickname);
            players.getPlayers().add(player);
        }
        saveToFile();
        return playerId;
    }

    @Override
    public Player deletePlayer(int id) {
        Player deletedPlayer = getPlayerById(id);
        players.setPlayers(players.getPlayers().stream().filter(player -> player.getId() != id).toList());
        saveToFile();
        return deletedPlayer;
    }

    @Override
    public int addPoints(int playerId, int points) {
        Player playerById = getPlayerById(playerId);
        playerById.setPoints(points);
        players.setPlayers(
                players.getPlayers()
                        .stream()
                        .map(player -> player.getId() == playerId ? playerById : player)
                        .toList()
        );
        saveToFile();
        return playerById.getPoints();
    }

    private Player findByNick(String nick) {
        return players.getPlayers().stream().filter(player -> player.getNick().equals(nick))
                .findFirst()
                .orElse(null);
    }

    abstract List<Player> readFromFile();
    abstract void saveToFile();
}
